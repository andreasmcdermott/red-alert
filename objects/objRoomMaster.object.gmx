<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.particleSystem = part_system_create();

global.partTypeDeath = part_type_create();
part_type_direction(global.partTypeDeath, 0, 360, 0, 0);
part_type_life(global.partTypeDeath, 16, 32);
part_type_speed(global.partTypeDeath, 1, 2, 0, 0);
part_type_size(global.partTypeDeath, 1, 2, 0, 0);

global.partTypeBulletHit = part_type_create();
part_type_direction(global.partTypeBulletHit, 0, 360, 0, 0);
part_type_life(global.partTypeBulletHit, 4, 16);
part_type_speed(global.partTypeBulletHit, 1, 2, 0, 0);
part_type_size(global.partTypeBulletHit, 1, 1, 0, 0);

minX = 32;
minY = 32;
maxX = room_width - 32;
maxY = room_height - 32;

columns = (maxX - minX) / 32;
rows = (maxY - minY) / 32;
var pieces = columns * rows / 3;

for(var i = 0; i &lt; columns; i++)
{
    for(var j = 0; j &lt; rows; j++)
    {
        items[i, j] = noone;
    }
}

instance_create(minX + 16, maxY - 16, objPlayer);

while(pieces &gt; 0)
{
    var px = irandom(columns - 1);
    var py = irandom(rows - 1);
    
    if((py &lt;= 1 &amp;&amp; px &lt;= 1) || (py &gt;= 7 &amp;&amp; px &gt;= 7) || (py &lt;= 1 &amp;&amp; px &gt;= 7) || (py &gt;= 7 &amp;&amp; px &lt;= 1))
        continue;
    
    if(items[px, py] == noone)
    {    
        var obj = instance_create(px * 32 + minX, py * 32 + minY, objWall);
        items[px, py] = obj;
        obj.image_index = 0;        
        pieces--;
    }
}

newWave();

itemsLeft = ds_list_create();

// Alarm
scrambleTimer = room_speed;
alarm[0] = scrambleTimer;
alarm[1] = 1
alarm[3] = room_speed * 10;

global.scrambleRow = -1;
global.scrambleCol = -1;
global.scrambleDir = -1;
global.state = "";
global.subState = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newWave();

alarm[3] = room_speed * 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.subState = "end";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.state == "")
{
    global.scrambleDir = irandom(3);
    global.scrambleCol = irandom(columns - 1);
    global.scrambleRow = irandom(rows - 1);
    global.state = "scramble";
    global.subState = "blink_on";
    alarm[1] = room_speed / 3;
}
else if(global.state == "scramble")
{
    if(global.subState == "blink_on")
    {
        global.subState = "blink_off";
        alarm[1] = room_speed / 3;
    }
    else if(global.subState == "blink_off")
    {
        global.subState = "blink_on";
        alarm[1] = room_speed / 3;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = 0;
global.subState = "begin";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.gameover)
{
    if(global.state == "scramble" &amp;&amp; global.subState == "begin")
    {   
        var row = global.scrambleRow;
        var col = global.scrambleCol;
        
        if(global.scrambleDir == 0) // Move columns left
        {               
            var firstObj = noone;
            for(var i = 0; i &lt; columns; i++)
            {
                var obj = items[i, row];
                if(obj != noone)
                {               
                    if(i == 0)
                    {
                        firstObj = obj;
                        obj.nextX = maxX - 32;
                        
                        var tempWall = instance_create(obj.x, obj.y, objWall);
                        tempWall.image_index = 0;
                        tempWall.nextX = 0;
                        tempWall.destroy = true;
                        ds_list_add(itemsLeft, tempWall);
                        
                        obj.x = maxX;
                    }
                    else
                    {
                        obj.nextX = obj.x - 32;
                        items[i - 1, row] = obj;
                    }
                    
                    items[i, row] = noone;
                    ds_list_add(itemsLeft, obj);
                }            
            }
            
            if(firstObj != noone)
            {
                items[columns - 1, row] = firstObj;
            }
        }
        else if(global.scrambleDir == 1) // Move columns right
        {              
            var lastObj = noone;
            for(var i = columns - 1; i &gt;= 0; i -= 1)
            {
                var obj = items[i, row];
                if(obj != noone)
                {               
                    if(i == columns - 1)
                    {
                        lastObj = obj;
                        obj.nextX = minX;
                        
                        var tempWall = instance_create(obj.x, obj.y, objWall);
                        tempWall.image_index = 0;
                        tempWall.nextX = room_width - 32;
                        tempWall.destroy = true;
                        ds_list_add(itemsLeft, tempWall);
                        
                        obj.x = 0;
                    }
                    else
                    {
                        obj.nextX = obj.x + 32;
                        items[i + 1, row] = obj;
                    }
                    
                    items[i, row] = noone;
                    ds_list_add(itemsLeft, obj);
                }            
            }
            
            if(lastObj != noone)
            {
                items[0, row] = lastObj;
            }
        }
        else if(global.scrambleDir == 2) // Move rows up
        {               
            var firstObj = noone;
            for(var i = 0; i &lt; rows; i++)
            {
                var obj = items[col, i];
                if(obj != noone)
                {                   
                    if(i == 0)
                    {
                        firstObj = obj;
                        obj.nextY = maxY - 32;
                        
                        var tempWall = instance_create(obj.x, obj.y, objWall);
                        tempWall.image_index = 0;
                        tempWall.nextY = 0;
                        tempWall.destroy = true;
                        ds_list_add(itemsLeft, tempWall);
                        
                        obj.y = maxY;
                    }
                    else
                    {
                        obj.nextY = obj.y - 32;
                        items[col, i - 1] = obj;
                    }
                    
                    items[col, i] = noone;
                    ds_list_add(itemsLeft, obj);
                }            
            }
            
            if(firstObj != noone)
            {
                items[col, rows - 1] = firstObj;
            }
        }
        else if(global.scrambleDir == 3) // Move rows down
        {              
            var lastObj = noone;
            for(var i = rows - 1; i &gt;= 0; i--)
            {
                var obj = items[col, i];
                if(obj != noone)
                {                
                    if(i == rows - 1)
                    {
                        lastObj = obj;
                        obj.nextY = minY;
                        
                        var tempWall = instance_create(obj.x, obj.y, objWall);
                        tempWall.image_index = 0;
                        tempWall.nextY = room_height - 32;
                        tempWall.destroy = true;
                        ds_list_add(itemsLeft, tempWall);
                        
                        obj.y = 0;
                    }
                    else
                    {
                        obj.nextY = obj.y + 32;
                        items[col, i + 1] = obj;
                    }
                    
                    items[col, i] = noone;
                    ds_list_add(itemsLeft, obj);
                }            
            }
            
            if(lastObj != noone)
            {
                items[col, 0] = lastObj;
            }
        }
        
        global.subState = "move";
    }
    else if(global.state == "scramble" &amp;&amp; global.subState == "move")
    {
        for(var i = 0; i &lt; ds_list_size(itemsLeft); i++)
        {
            with(ds_list_find_value(itemsLeft, i))
            {
                hspeed = 0;
                vspeed = 0;
                
                if(global.scrambleDir == 0)
                    hspeed = -2;
                else if(global.scrambleDir == 1)
                    hspeed = 2;
                else if(global.scrambleDir == 2)
                    vspeed = -2;
                else
                    vspeed = 2;
            }
        }
        
        global.subState = "ending";
        alarm[2] = 16;
    }
    else if(global.subState == "end")
    {
        for(var i = 0; i &lt; ds_list_size(itemsLeft); i++)
        {
            with(ds_list_find_value(itemsLeft, i))
            {
                if(destroy)
                {
                    instance_destroy();
                }
                else
                {
                    if(global.scrambleDir &lt;= 1)
                        x = nextX;
                    else
                        y = nextY;
                    speed = 0;
                }
            }
        }
        
        ds_list_clear(itemsLeft);
        
        global.state = "";
        global.subState = "";
        alarm[0] = scrambleTimer;
        alarm[1] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.gameover)
{
    draw_set_color(c_white);
    var countdown = alarm[3] / 60;
    draw_text(room_width - 104, 4, "Next: " + string(countdown));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
